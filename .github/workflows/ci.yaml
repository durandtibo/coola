name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:  # to trigger manually

jobs:
  coverage:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install-all

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: Format
        run: |
          poetry run make format

      - name: Lint
        run: |
          poetry run make lint

      - name: Run unit tests
        run: |
          poetry run make unit-test-cov

      - name: Run doctest on source code
        run: |
          poetry run make doctest-src

      - name: Upload coverage to Codecov
        if: github.repository == 'durandtibo/coola' && (github.event_name == 'push' || github.event_name == 'pull_request')
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          # Ignore codecov failures as the codecov server is not
          # very reliable but we don't want to report a failure
          # in the github UI just because the coverage report failed to
          # be published.
          fail_ci_if_error: false

      - name: Test & publish code coverage
        uses: paambaati/codeclimate-action@v5.0.0
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
        with:
          coverageLocations: ./coverage.xml:coverage.py
          debug: true


  detect-cyclic-import:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install-all

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: check coola.comparators
        run: |
          poetry run python -c "from coola import comparators"
      - name: check coola.formatters
        run: |
          poetry run python -c "from coola import formatters"
      - name: check coola.reducers
        run: |
          poetry run python -c "from coola import reducers"
      - name: check coola.summarizers
        run: |
          poetry run python -c "from coola import summarizers"
      - name: check coola.testers
        run: |
          poetry run python -c "from coola import testers"
      - name: check coola.utils
        run: |
          poetry run python -c "from coola import utils"


  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.9', '3.10', '3.11' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install-all

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: Format
        run: |
          poetry run make format

      - name: Lint
        run: |
          poetry run make lint

      - name: Run unit tests
        run: |
          poetry run make unit-test-cov


  test-minimal:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.9', '3.10', '3.11' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: Format
        run: |
          poetry run make format

      - name: Lint
        run: |
          poetry run make lint

      - name: Run unit tests
        run: |
          poetry run make unit-test-cov


  test-jax:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]
        jax-version: [ 0.4.14, 0.3.25 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install

      - name: Install jax
        run: |
          poetry run pip install jax==${{ matrix.jax-version }} jaxlib==${{ matrix.jax-version }}

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: Run unit tests
        run: |
          poetry run make unit-test-cov


  test-numpy:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]
        numpy-version: [ 1.25.2, 1.24.3, 1.23.5, 1.22.4, 1.21.6 ]
        include:
          - os: ubuntu-latest
            python-version: 3.9
            numpy-version: 1.20.3

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install

      - name: Install NumPy
        run: |
          poetry run pip install numpy==${{ matrix.numpy-version }}

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: Run unit tests
        run: |
          poetry run make unit-test-cov


  test-pandas:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]
        pandas-version: [ 2.0.3, 1.5.3, 1.4.4, 1.3.5 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install

      - name: Install pandas
        run: |
          poetry run pip install pandas==${{ matrix.pandas-version }}

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: Run unit tests
        run: |
          poetry run make unit-test-cov


  test-polars:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]
        polars-version: [ '0.19', '0.18', '0.18.3' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install

      - name: Install polars
        run: |
          poetry run pip install polars==${{ matrix.polars-version }}

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: Run unit tests
        run: |
          poetry run make unit-test-cov


  test-torch:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]
        pytorch-version: [ 2.0.0, 1.13.1, 1.12.1, 1.11.0 ]
        include:
          - os: ubuntu-latest
            python-version: 3.9
            pytorch-version: 1.10.0

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install

      - name: Install PyTorch
        run: |
          poetry run pip install torch==${{ matrix.pytorch-version }}

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: Run unit tests
        run: |
          poetry run make unit-test-cov


  test-xarray:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.10' ]
        xarray-version: [ '2023.8', '2023.7', '2023.6', '2023.5', '2023.4', '2023.3' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install packages
        run: |
          poetry run make config-poetry
          poetry run make install

      - name: Install xarray
        run: |
          poetry run pip install xarray==${{ matrix.xarray-version }}

      - name: Show installed packages
        run: |
          poetry run poetry show
          poetry run poetry show --tree

      - name: Run unit tests
        run: |
          poetry run make unit-test-cov
