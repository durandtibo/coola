name: Nightly Package Tests
on:
  schedule:
    - cron: '0 10 * * *' # run at 10 AM UTC
  workflow_dispatch:  # to trigger manually

jobs:
  cyclic-imports:
    uses: ./.github/workflows/cyclic-imports.yaml

  all:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.12', '3.11' , '3.10', '3.9' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install "coola[all]"

      - name: Tests
        run: |
          python -c "import coola; import torch; import numpy; " \
            "assert coola.is_jax_available(); " \
            "assert coola.is_numpy_available(); " \
            "assert coola.is_pandas_available(); " \
            "assert coola.is_polars_available(); " \
            "assert coola.is_torch_available(); " \
            "assert coola.is_xarray_available(); " \
            "assert coola.objects_are_equal(torch.arange(6), torch.arange(6)); " \
            "assert coola.objects_are_equal(numpy.arange(6), numpy.arange(6)); "

      - name: Check imports
        run: |
          python -c "from coola import objects_are_allclose, objects_are_equal, summary"
          python -c "from coola.comparators import BaseAllCloseOperator, BaseEqualityOperator"
          python -c "from coola.formatters import BaseFormatter"
          python -c "from coola.reducers import BaseReducer"
          python -c "from coola.summarizers import BaseSummarizer"
          python -c "from coola.testers import BaseAllCloseTester, BaseEqualityTester"


  min:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.12', '3.11' , '3.10', '3.9' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install coola

      - name: Tests
        run: |
          python -c "import coola; " \
            "assert coola.objects_are_equal(1.0, 1.0); " \
            "assert not coola.is_jax_available();" \
            "assert not coola.is_numpy_available();" \
            "assert not coola.is_pandas_available();" \
            "assert not coola.is_polars_available();" \
            "assert not coola.is_torch_available(); " \
            "assert not coola.is_xarray_available(); "


  jax:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11' , '3.10', '3.9' ]
        jax-version: [ 0.4.21, 0.4.1 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install coola jax==${{ matrix.jax-version }} jaxlib==${{ matrix.jax-version }}

      - name: Tests
        run: |
          python -c "import coola; import jax; assert coola.objects_are_equal(jax.numpy.arange(6), jax.numpy.arange(6))"


  numpy:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11' , '3.10', '3.9' ]
        numpy-version: [ 1.26.2, 1.25.2, 1.24.3, 1.23.5, 1.22.4, 1.21.6 ]
        exclude:
          - numpy-version: 1.21.6
            python-version: 3.11

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install coola numpy==${{ matrix.numpy-version }}

      - name: Tests
        run: |
          python -c "import coola; import numpy; assert coola.objects_are_equal(numpy.arange(6), numpy.arange(6))"


  pandas:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11' , '3.10', '3.9' ]
        pandas-version: [ 2.1.4, 2.0.3, 1.5.3, 1.4.4, 1.3.5 ]
        exclude:
          - pandas-version: 1.4.4
            python-version: 3.11
          - pandas-version: 1.3.5
            python-version: 3.11

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install coola pandas==${{ matrix.pandas-version }}

      - name: Tests
        run: |
          python -c "import coola; import pandas; " \
            "assert coola.objects_are_equal(pandas.DataFrame({"col1": [1,2,3,4,5], "col2": [1.1,2.2,3.3,4.4,5.5]}), pandas.DataFrame({"col1": [1,2,3,4,5], "col2": [1.1,2.2,3.3,4.4,5.5]}))"


  polars:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11' , '3.10', '3.9' ]
        polars-version: [ '0.19.19', '0.18.15' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install coola polars==${{ matrix.polars-version }}

      - name: Tests
        run: |
          python -c "import coola; import polars; " \
            "assert coola.objects_are_equal(polars.DataFrame({"col1": [1,2,3,4,5], "col2": [1.1,2.2,3.3,4.4,5.5]}), polars.DataFrame({"col1": [1,2,3,4,5], "col2": [1.1,2.2,3.3,4.4,5.5]}))"


  torch:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11' , '3.10', '3.9' ]
        torch-version: [ 2.1.1, 2.0.1, 1.13.1, 1.12.1, 1.11.0, 1.10.2 ]
        exclude:
          - torch-version: 1.10.2
            python-version: 3.10
          - torch-version: 1.10.2
            python-version: 3.11
          - torch-version: 1.11.0
            python-version: 3.11
          - torch-version: 1.12.1
            python-version: 3.11

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install coola torch==${{ matrix.torch-version }}

      - name: Tests
        run: |
          python -c "import coola; import torch; assert coola.objects_are_equal(torch.arange(6), torch.arange(6))"


  xarray:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      max-parallel: 8
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.12', '3.11' , '3.10', '3.9' ]
        xarray-version: [ '2023.12', '2023.11', '2023.10', '2023.9', '2023.8', '2023.7', '2023.6', '2023.5', '2023.4', '2023.3', '2023.2', '2023.1' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          pip install coola xarray==${{ matrix.xarray-version }}

      - name: Tests
        run: |
          python -c "import coola; import xarray as xr; import numpy as np; " \
            "assert coola.objects_are_equal(xr.DataArray(np.arange(6), dims=["z"]), xr.DataArray(np.arange(6), dims=["z"]))"
